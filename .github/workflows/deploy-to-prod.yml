# This workflow is triggered on a "release published" event.
# It has two actions:
#   1. Deploy the released container to production
#   2. Create a backmerge PR from the release branch -> main
#      If there is no difference between main and release branch
#      the release branch will be automatically deleted
name: Deploy to PROD ðŸš€

# CUSTOMIZE THESE FOR YOUR REPOSITORY
env:
  aws-region: us-east-1
  image: IMAGE_NAME
  task-definition: TASK_DEFINITION_FILE
  cluster: ECS_CLUSTER
  service: ECS_SERVICE
  container-name: CONTAINER_NAME


# This workflow when a release is published
on:
  release:
    types: ["published"]

concurrency: deploy_to_prod

jobs:
  # output details about this run
  setup:
    continue-on-error: true
    name: Info
    runs-on: ubuntu-latest
    outputs:
      image: ${{ env.image }}
      task-definition: ${{ env.task-definition }}
      cluster: ${{ env.cluster }}
      service: ${{ env.service }}
      container-name: ${{ env.container-name}}
      aws-region: ${{ env.aws-region }}
    steps:
      - run: |
          cat << EOF
          ${{ toJSON(github) }}'
          EOF
  
  deploy:
    needs: setup
    name: "Deploy to ECS"
    uses: ./.github/workflows/util-deploy-ecs-container.yml
    with:
      container-name: ${{ needs.setup.outputs.container-name }}
      image: "${{ needs.setup.output.image }}:${{ github.sha }}"
      task-definition: ${{ needs.setup.outputs.task-definition}}
      cluster: ${{ needs.setup.outputs.cluster }}
      service: ${{ needs.setup.outputs.service }}
      aws-region: ${{ needs.setup.outputs.aws-region }}
      environment: production
    secrets:
      aws_access_key_id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
      aws_secret_access_key_id: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
  
  open-pr:
    name: "Create backmerge PR if necessary"
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.target_commitish }}
          fetch-depth: 0
      
      - name: Check to see if the release commit differs from main
        id: check-skip-backmerge
        env:
          RELEASE_BRANCH: ${{ github.event.release.target_commitish }}
        run: |
          git fetch origin main
          if [ "$(git rev-parse origin/main)" = "$(git rev-parse $RELEASE_BRANCH)" ]; then
            echo "Release commit exists on main. Skipping the backmerge and deleting branch"
            git push origin -d $RELEASE_BRANCH
          else
            echo "::set-output name=createpr::true"
          fi

      - name: Create Pull Request
        if: ${{ steps.check-skip-backmerge.outputs.createpr }}
        id: cpr
        uses: devops-infra/action-pull-request@v0.4.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          source_branch: ${{ github.event.release.target_commitish }}
          target_branch: main
          title: "${{ github.event.release.name }} -> main"
          body: |
            This PR was auto-generated after the release because the
            release branch has changes that aren't in main.
          label: release
          ignore_users: "dependabot"
